seed <- NA
if (!is.na(seed)) set.seed(seed)
#### Subsetting ####
BMT.val <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 4:13], rownames.force = FALSE)
BMT.nms <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 1:3], rownames.force = FALSE)
LUX <- rbind(DATA[(DATA[ ,3] == "Lux Hub"), ], DATA[(DATA[ ,1] == "Lux Hub"), ])
LUX.val <- as.matrix(LUX[,4:13], rownames.force = FALSE)
LUX.nms <- as.matrix(LUX[1:3], rownames.force = FALSE)
#### All after this line are part of repeating structure for multiple simulation runs ####
# Previous lines organize the data & shouldn't change between batches of simulation runs
## Initialization for Factories, Hub & Transit
BMT.inv <- vector("list", length = nrow(BMT.val))
BMT.trns <- vector("list", length = nrow(BMT.val))
for (row in 1:nrow(BMT.val)) {
dmd <- BMT.val[row, 7:8]
modes <- BMT.val[row, 1:6]
BMT.inv[[row]] <- gen.inv(nSim, BMT.nms[row,3], BMT.val[row, 9], dmd, dOpen, dOrder)
BMT.trns[[row]] <- gen.trans(nSim, modes, dis = disrupt)
}
lux.hub <- gen.hub(nSim, LUX.nms[,3], LUX.val[,9], LUX.val[,7:8], dOpen, dOrder, LUX.val[, 1:6], dis = disrupt)
####  SIMULATION LOOP  ####
len <- length(BMT.inv)
for (time in 1:nSim) {
for (fac in 1:len) {
simulate(time, (BMT.inv[[fac]]), (BMT.trns[[fac]]), qnt)
}
simulate.hub(time, lux.hub, qnt)
}
OUTPUT.LOC <- saveData(BMT.inv, BMT.trns, lux.hub, name, qnt)
source('C:/Users/a421356/R-GitHub/SCMsim/R/Analysis.R')
#### Remove Reference Classes to prevent memory leaks ####
# use while in production NOT while debugging
# rm(list = c("BMT.inv", "BMT.trns", "lux.hub", "row", "time"))
# Run source() on each of the follwing files for your machine in order to
# load the neccessary functons to run the simulation
#### object definitions required to run simulation ####
source('C:/Users/a421356/R-GitHub/SCMsim/R/invRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/transRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/hubRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/simulation.R')
setwd('C:/Users/a421356/R-GitHub/SCMsim/data')
DATA <- read.csv("BUD1207.csv", colClasses = c(rep("character", 3), rep("numeric", 10)))
# sets directory to Output so we can keep our output seperate from the program files
setwd('C:/Users/a421356/R-GitHub/SCMsim/Output')
#### Name, Quantile & Initial Conditions ####
disrupt <- 21
name <- paste("No Error - 7 Day Pipeline - Disruption Days -", disrupt)
qnt <- 0.5
dOpen <- 6
dOrder <- 1
# remember at the end that the first 500 records are thrown away without analysis!
# (maybe save full data dump later)
nSim <- 1500
#### do we want to set the seed number (for reproducability)? ####
# defaults to NO, otherwise change NA to INTEGER of choice
seed <- NA
if (!is.na(seed)) set.seed(seed)
#### Subsetting ####
BMT.val <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 4:13], rownames.force = FALSE)
BMT.nms <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 1:3], rownames.force = FALSE)
LUX <- rbind(DATA[(DATA[ ,3] == "Lux Hub"), ], DATA[(DATA[ ,1] == "Lux Hub"), ])
LUX.val <- as.matrix(LUX[,4:13], rownames.force = FALSE)
LUX.nms <- as.matrix(LUX[1:3], rownames.force = FALSE)
#### All after this line are part of repeating structure for multiple simulation runs ####
# Previous lines organize the data & shouldn't change between batches of simulation runs
## Initialization for Factories, Hub & Transit
BMT.inv <- vector("list", length = nrow(BMT.val))
BMT.trns <- vector("list", length = nrow(BMT.val))
for (row in 1:nrow(BMT.val)) {
dmd <- BMT.val[row, 7:8]
modes <- BMT.val[row, 1:6]
BMT.inv[[row]] <- gen.inv(nSim, BMT.nms[row,3], BMT.val[row, 9], dmd, dOpen, dOrder)
BMT.trns[[row]] <- gen.trans(nSim, modes, dis = disrupt)
}
lux.hub <- gen.hub(nSim, LUX.nms[,3], LUX.val[,9], LUX.val[,7:8], dOpen, dOrder, LUX.val[, 1:6], dis = disrupt)
####  SIMULATION LOOP  ####
len <- length(BMT.inv)
for (time in 1:nSim) {
for (fac in 1:len) {
simulate(time, (BMT.inv[[fac]]), (BMT.trns[[fac]]), qnt)
}
simulate.hub(time, lux.hub, qnt)
}
OUTPUT.LOC <- saveData(BMT.inv, BMT.trns, lux.hub, name, qnt)
source('C:/Users/a421356/R-GitHub/SCMsim/R/Analysis.R')
# Run source() on each of the follwing files for your machine in order to
# load the neccessary functons to run the simulation
#### object definitions required to run simulation ####
source('C:/Users/a421356/R-GitHub/SCMsim/R/invRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/transRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/hubRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/simulation.R')
setwd('C:/Users/a421356/R-GitHub/SCMsim/data')
DATA <- read.csv("BUD1207.csv", colClasses = c(rep("character", 3), rep("numeric", 10)))
# sets directory to Output so we can keep our output seperate from the program files
setwd('C:/Users/a421356/R-GitHub/SCMsim/Output')
#### Name, Quantile & Initial Conditions ####
disrupt <- 21
name <- paste("No Error - 7 Day Pipeline - Disruption Days -", disrupt)
qnt <- 0.5
dOpen <- 6
dOrder <- 1
# remember at the end that the first 500 records are thrown away without analysis!
# (maybe save full data dump later)
nSim <- 1500
#### do we want to set the seed number (for reproducability)? ####
# defaults to NO, otherwise change NA to INTEGER of choice
seed <- NA
if (!is.na(seed)) set.seed(seed)
#### Subsetting ####
BMT.val <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 4:13], rownames.force = FALSE)
BMT.nms <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 1:3], rownames.force = FALSE)
LUX <- rbind(DATA[(DATA[ ,3] == "Lux Hub"), ], DATA[(DATA[ ,1] == "Lux Hub"), ])
LUX.val <- as.matrix(LUX[,4:13], rownames.force = FALSE)
LUX.nms <- as.matrix(LUX[1:3], rownames.force = FALSE)
#### All after this line are part of repeating structure for multiple simulation runs ####
# Previous lines organize the data & shouldn't change between batches of simulation runs
## Initialization for Factories, Hub & Transit
BMT.inv <- vector("list", length = nrow(BMT.val))
BMT.trns <- vector("list", length = nrow(BMT.val))
for (row in 1:nrow(BMT.val)) {
dmd <- BMT.val[row, 7:8]
modes <- BMT.val[row, 1:6]
BMT.inv[[row]] <- gen.inv(nSim, BMT.nms[row,3], BMT.val[row, 9], dmd, dOpen, dOrder)
BMT.trns[[row]] <- gen.trans(nSim, modes, dis = disrupt)
}
lux.hub <- gen.hub(nSim, LUX.nms[,3], LUX.val[,9], LUX.val[,7:8], dOpen, dOrder, LUX.val[, 1:6], dis = disrupt)
####  SIMULATION LOOP  ####
len <- length(BMT.inv)
for (time in 1:nSim) {
for (fac in 1:len) {
simulate(time, (BMT.inv[[fac]]), (BMT.trns[[fac]]), qnt)
}
simulate.hub(time, lux.hub, qnt)
}
OUTPUT.LOC <- saveData(BMT.inv, BMT.trns, lux.hub, name, qnt)
source('C:/Users/a421356/R-GitHub/SCMsim/R/Analysis.R')
#### Remove Reference Classes to prevent memory leaks ####
# use while in production NOT while debugging
# rm(list = c("BMT.inv", "BMT.trns", "lux.hub", "row", "time"))
View(BMT.nms)
# Run source() on each of the follwing files for your machine in order to
# load the neccessary functons to run the simulation
#### object definitions required to run simulation ####
source('C:/Users/a421356/R-GitHub/SCMsim/R/invRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/transRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/hubRef.R')
source('C:/Users/a421356/R-GitHub/SCMsim/R/simulation.R')
setwd('C:/Users/a421356/R-GitHub/SCMsim/data')
DATA <- read.csv("BUD1207.csv", colClasses = c(rep("character", 3), rep("numeric", 10)))
# sets directory to Output so we can keep our output seperate from the program files
setwd('C:/Users/a421356/R-GitHub/SCMsim/Output')
#### Name, Quantile & Initial Conditions ####
disrupt <- 21
name <- paste("7 Day Pipeline - Disruption Days -", disrupt)
qnt <- 0.95
dOpen <- 6
dOrder <- 1
# remember at the end that the first 500 records are thrown away without analysis!
# (maybe save full data dump later)
nSim <- 1500
#### do we want to set the seed number (for reproducability)? ####
# defaults to NO, otherwise change NA to INTEGER of choice
seed <- NA
if (!is.na(seed)) set.seed(seed)
#### Subsetting ####
BMT.val <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 4:13], rownames.force = FALSE)
BMT.nms <- as.matrix(DATA[((DATA[ ,1] == "Beaumont") & (DATA[ ,3] != "Lux Hub")), 1:3], rownames.force = FALSE)
LUX <- rbind(DATA[(DATA[ ,3] == "Lux Hub"), ], DATA[(DATA[ ,1] == "Lux Hub"), ])
LUX.val <- as.matrix(LUX[,4:13], rownames.force = FALSE)
LUX.nms <- as.matrix(LUX[1:3], rownames.force = FALSE)
#### All after this line are part of repeating structure for multiple simulation runs ####
# Previous lines organize the data & shouldn't change between batches of simulation runs
## Initialization for Factories, Hub & Transit
BMT.inv <- vector("list", length = nrow(BMT.val))
BMT.trns <- vector("list", length = nrow(BMT.val))
for (row in 1:nrow(BMT.val)) {
dmd <- BMT.val[row, 7:8]
modes <- BMT.val[row, 1:6]
BMT.inv[[row]] <- gen.inv(nSim, BMT.nms[row,3], BMT.val[row, 9], dmd, dOpen, dOrder)
BMT.trns[[row]] <- gen.trans(nSim, modes, dis = disrupt)
}
lux.hub <- gen.hub(nSim, LUX.nms[,3], LUX.val[,9], LUX.val[,7:8], dOpen, dOrder, LUX.val[, 1:6], dis = disrupt)
####  SIMULATION LOOP  ####
len <- length(BMT.inv)
for (time in 1:nSim) {
for (fac in 1:len) {
simulate(time, (BMT.inv[[fac]]), (BMT.trns[[fac]]), qnt)
}
simulate.hub(time, lux.hub, qnt)
}
OUTPUT.LOC <- saveData(BMT.inv, BMT.trns, lux.hub, name, qnt)
source('C:/Users/a421356/R-GitHub/SCMsim/R/Analysis.R')
#### Remove Reference Classes to prevent memory leaks ####
# use while in production NOT while debugging
# rm(list = c("BMT.inv", "BMT.trns", "lux.hub", "row", "time"))
library(ggplot2)
options(scipen = 10)
#### Don't use any directory assistance, unless testing ####
### USE THIS FOR ACTIVE DIRECTORY / SIMULATION
# DIR <- getwd()
# setwd(paste0(DIR, "/Output"))
### SIM.DIR should be coming from the 'script.R' which calls this file
# OUTPUT.LOC <- c(getwd(), "TEST - quant 0.95.csv")
#### Sets the output directory to the path returned at the end of script.R ####
setwd((OUTPUT.LOC[1]))
data <- read.csv((OUTPUT.LOC[2]))
colnames(data)[1] <- "date"
nSim <- nrow(data) / length(f.name)
data$date[nSim:length(data$date)] <- ((data$date[nSim:length(data$date)] %% nSim) + 1)
f.name <- as.character(unique(data$factory))
zeroes <- matrix(0, nrow = length(f.name), ncol = 3, dimnames = list(row = f.name, col = c("WholeSim", "Disruption+100", "Proportion")))
row.names(zeroes) <- f.name
#### loop to create multiple output graphs per simulation run, labeled independently ####
for (i in 1:length(f.name)) {
whole.sim <- data[(data$factory == f.name[i]), ]
disrupt <- whole.sim[700:900, ] # graphing data
disr <- whole.sim[750:850, ] #
zrs <- c(sum(((whole.sim$daily_inv == 0) & (1:nSim >= 100))), sum((disr$daily_inv == 0)))
zrs <- c(zrs, (zrs[2] / zrs[1]))
zeroes[i, ] <- zrs
tw <- ggplot(whole.sim)
td <- ggplot(disrupt)
# begin PDF creation
pdf(paste0(OUTPUT.LOC[1], "/", f.name[i], ".pdf"), width = 11, height = 8.5, onefile = TRUE, title = f.name[i])
# plot of the whole simulation
# x = days, y = daily inventory
print(tw + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(whole.sim$daily_inv)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 12]), linetype = "dashed") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
labs(list(title = paste("Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = in transit inventory
print(tw + geom_point(aes(x = date, y = in_transit)) + ylim(0, max(whole.sim$in_transit)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed")  +
stat_smooth(mapping = aes(x = date, y = in_transit), geom = "line", col = "red") +
labs(list(title = paste("In Transit Inventory -", f.name[i]),
x = "Simulation Days", y = "In Transit Inventory (kgs.)" )))
# plot of the disruption range (+50 days before and +50 after) simulation
# x = days, y = daily inventory
print(td + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(disrupt$daily_inv)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed") +
geom_vline(aes(xintercept = 750), linetype = "dotted") +
geom_vline(aes(xintercept = (750+21), linetype = "dotted")) +
stat_smooth(mapping = aes(x = date, y = daily_inv),
data = whole.sim, geom = "line", col = "red") +
labs(list(title = paste("Disruption Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = forecast error
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
print(tw + geom_point(aes(x = date, y = forecast_err)) +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "red") +
labs(list(title = paste("Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Forecast Error (kgs.)" )))
# plot of the whole simulation
# x = days, y1 = forecast error, y2 = actual daily inventory
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
# also confirming that the error is small, and comparing large error outliers to the inventory
print(tw + geom_line(aes(x = date, y = forecast_err), col = "red") +
labs(list(title = paste("Daily Inventory & Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Material (kgs.)" )) +
geom_line(aes(x = date, y = daily_inv), col = "black") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "black"))
# histogram confirming that errors are normally distributed
#   (but zero-inflated due to off days)
print(tw + geom_histogram(mapping = aes(x = forecast_err, y = ..density..)) +
geom_density(aes(x = forecast_err, y = ..density..), col = "red"))
# end PDF creation
dev.off()
}
#### write the table of values for days with zero inventory, starting point ####
write.csv(zeroes, "ZeroInventoryTable.csv", quote = FALSE)
library(ggplot2)
options(scipen = 10)
#### Don't use any directory assistance, unless testing ####
### USE THIS FOR ACTIVE DIRECTORY / SIMULATION
# DIR <- getwd()
# setwd(paste0(DIR, "/Output"))
### SIM.DIR should be coming from the 'script.R' which calls this file
# OUTPUT.LOC <- c(getwd(), "TEST - quant 0.95.csv")
#### Sets the output directory to the path returned at the end of script.R ####
setwd((OUTPUT.LOC[1]))
data <- read.csv((OUTPUT.LOC[2]))
colnames(data)[1] <- "date"
nSim <- nrow(data) / length(f.name)
data$date[nSim:length(data$date)] <- ((data$date[nSim:length(data$date)] %% nSim) + 1)
f.name <- as.character(unique(data$factory))
zeroes <- matrix(0, nrow = length(f.name), ncol = 3, dimnames = list(row = f.name, col = c("WholeSim", "Disruption+100", "Proportion")))
row.names(zeroes) <- f.name
#### loop to create multiple output graphs per simulation run, labeled independently ####
for (i in 1:length(f.name)) {
whole.sim <- data[(data$factory == f.name[i]), ]
disrupt <- whole.sim[700:900, ] # graphing data
disr <- whole.sim[750:850, ] #
zrs <- c(sum(((whole.sim$daily_inv == 0) & (1:nSim >= 100))), sum((disr$daily_inv == 0)))
zrs <- c(zrs, (zrs[2] / zrs[1]))
zeroes[i, ] <- zrs
tw <- ggplot(whole.sim)
td <- ggplot(disrupt)
# begin PDF creation
pdf(paste0(OUTPUT.LOC[1], "/", f.name[i], ".pdf"), width = 11, height = 8.5, onefile = TRUE, title = f.name[i])
# plot of the whole simulation
# x = days, y = daily inventory
print(tw + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(whole.sim$daily_inv)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 12]), linetype = "dashed") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
labs(list(title = paste("Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = in transit inventory
print(tw + geom_point(aes(x = date, y = in_transit)) + ylim(0, max(whole.sim$in_transit)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed")  +
stat_smooth(mapping = aes(x = date, y = in_transit), geom = "line", col = "red") +
labs(list(title = paste("In Transit Inventory -", f.name[i]),
x = "Simulation Days", y = "In Transit Inventory (kgs.)" )))
# plot of the disruption range (+50 days before and +50 after) simulation
# x = days, y = daily inventory
print(td + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(disrupt$daily_inv)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed") +
geom_vline(aes(xintercept = 750), linetype = "dotted") +
geom_vline(aes(xintercept = (750+21), linetype = "dotted")) +
stat_smooth(mapping = aes(x = date, y = daily_inv),
data = whole.sim, geom = "line", col = "red") +
labs(list(title = paste("Disruption Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = forecast error
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
print(tw + geom_point(aes(x = date, y = forecast_err)) +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "red") +
labs(list(title = paste("Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Forecast Error (kgs.)" )))
# plot of the whole simulation
# x = days, y1 = forecast error, y2 = actual daily inventory
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
# also confirming that the error is small, and comparing large error outliers to the inventory
print(tw + geom_line(aes(x = date, y = forecast_err), col = "red") +
labs(list(title = paste("Daily Inventory & Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Material (kgs.)" )) +
geom_line(aes(x = date, y = daily_inv), col = "black") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "black"))
# histogram confirming that errors are normally distributed
#   (but zero-inflated due to off days)
print(tw + geom_histogram(mapping = aes(x = forecast_err, y = ..density..)) +
geom_density(aes(x = forecast_err, y = ..density..), col = "red"))
# end PDF creation
dev.off()
}
#### write the table of values for days with zero inventory, starting point ####
write.csv(zeroes, "ZeroInventoryTable.csv", quote = FALSE)
library(ggplot2)
options(scipen = 10)
#### Don't use any directory assistance, unless testing ####
### USE THIS FOR ACTIVE DIRECTORY / SIMULATION
# DIR <- getwd()
# setwd(paste0(DIR, "/Output"))
### SIM.DIR should be coming from the 'script.R' which calls this file
# OUTPUT.LOC <- c(getwd(), "TEST - quant 0.95.csv")
#### Sets the output directory to the path returned at the end of script.R ####
setwd((OUTPUT.LOC[1]))
data <- read.csv((OUTPUT.LOC[2]))
colnames(data)[1] <- "date"
nSim <- nrow(data) / length(f.name)
data$date[nSim:length(data$date)] <- ((data$date[nSim:length(data$date)] %% nSim) + 1)
f.name <- as.character(unique(data$factory))
zeroes <- matrix(0, nrow = length(f.name), ncol = 3, dimnames = list(row = f.name, col = c("WholeSim", "Disruption+100", "Proportion")))
row.names(zeroes) <- f.name
#### loop to create multiple output graphs per simulation run, labeled independently ####
for (i in 1:length(f.name)) {
whole.sim <- data[(data$factory == f.name[i]), ]
disrupt <- whole.sim[700:900, ] # graphing data
disr <- whole.sim[750:850, ] #
zrs <- c(sum(((whole.sim$daily_inv == 0) & (1:nSim >= 100))), sum((disr$daily_inv == 0)))
zrs <- c(zrs, (zrs[2] / zrs[1]))
zeroes[i, ] <- zrs
tw <- ggplot(whole.sim)
td <- ggplot(disrupt)
# begin PDF creation
pdf(paste0(OUTPUT.LOC[1], "/", f.name[i], ".pdf"), width = 11, height = 8.5, onefile = TRUE, title = f.name[i])
# plot of the whole simulation
# x = days, y = daily inventory
print(tw + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(whole.sim$daily_inv)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 12]), linetype = "dashed") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
labs(list(title = paste("Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = in transit inventory
print(tw + geom_point(aes(x = date, y = in_transit)) + ylim(0, max(whole.sim$in_transit)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed")  +
stat_smooth(mapping = aes(x = date, y = in_transit), geom = "line", col = "red") +
labs(list(title = paste("In Transit Inventory -", f.name[i]),
x = "Simulation Days", y = "In Transit Inventory (kgs.)" )))
# plot of the disruption range (+50 days before and +50 after) simulation
# x = days, y = daily inventory
print(td + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(disrupt$daily_inv)) + xlim(700, 900)
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed") +
geom_vline(aes(xintercept = 750), linetype = "dotted") +
geom_vline(aes(xintercept = (750+21), linetype = "dotted")) +
stat_smooth(mapping = aes(x = date, y = daily_inv),
data = whole.sim, geom = "line", col = "red") +
labs(list(title = paste("Disruption Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = forecast error
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
print(tw + geom_point(aes(x = date, y = forecast_err)) +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "red") +
labs(list(title = paste("Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Forecast Error (kgs.)" )))
# plot of the whole simulation
# x = days, y1 = forecast error, y2 = actual daily inventory
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
# also confirming that the error is small, and comparing large error outliers to the inventory
print(tw + geom_line(aes(x = date, y = forecast_err), col = "red") +
labs(list(title = paste("Daily Inventory & Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Material (kgs.)" )) +
geom_line(aes(x = date, y = daily_inv), col = "black") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "black"))
# histogram confirming that errors are normally distributed
#   (but zero-inflated due to off days)
print(tw + geom_histogram(mapping = aes(x = forecast_err, y = ..density..)) +
geom_density(aes(x = forecast_err, y = ..density..), col = "red"))
# end PDF creation
dev.off()
}
#### write the table of values for days with zero inventory, starting point ####
write.csv(zeroes, "ZeroInventoryTable.csv", quote = FALSE)
library(ggplot2)
options(scipen = 10)
#### Don't use any directory assistance, unless testing ####
### USE THIS FOR ACTIVE DIRECTORY / SIMULATION
# DIR <- getwd()
# setwd(paste0(DIR, "/Output"))
### SIM.DIR should be coming from the 'script.R' which calls this file
# OUTPUT.LOC <- c(getwd(), "TEST - quant 0.95.csv")
#### Sets the output directory to the path returned at the end of script.R ####
setwd((OUTPUT.LOC[1]))
data <- read.csv((OUTPUT.LOC[2]))
colnames(data)[1] <- "date"
nSim <- nrow(data) / length(f.name)
data$date[nSim:length(data$date)] <- ((data$date[nSim:length(data$date)] %% nSim) + 1)
f.name <- as.character(unique(data$factory))
zeroes <- matrix(0, nrow = length(f.name), ncol = 3, dimnames = list(row = f.name, col = c("WholeSim", "Disruption+100", "Proportion")))
row.names(zeroes) <- f.name
#### loop to create multiple output graphs per simulation run, labeled independently ####
for (i in 1:length(f.name)) {
whole.sim <- data[(data$factory == f.name[i]), ]
disrupt <- whole.sim[700:900, ] # graphing data
disr <- whole.sim[750:850, ] #
zrs <- c(sum(((whole.sim$daily_inv == 0) & (1:nSim >= 100))), sum((disr$daily_inv == 0)))
zrs <- c(zrs, (zrs[2] / zrs[1]))
zeroes[i, ] <- zrs
tw <- ggplot(whole.sim)
td <- ggplot(disrupt)
# begin PDF creation
pdf(paste0(OUTPUT.LOC[1], "/", f.name[i], ".pdf"), width = 11, height = 8.5, onefile = TRUE, title = f.name[i])
# plot of the whole simulation
# x = days, y = daily inventory
print(tw + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(whole.sim$daily_inv)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 12]), linetype = "dashed") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
labs(list(title = paste("Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = in transit inventory
print(tw + geom_point(aes(x = date, y = in_transit)) + ylim(0, max(whole.sim$in_transit)) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed")  +
stat_smooth(mapping = aes(x = date, y = in_transit), geom = "line", col = "red") +
labs(list(title = paste("In Transit Inventory -", f.name[i]),
x = "Simulation Days", y = "In Transit Inventory (kgs.)" )))
# plot of the disruption range (+50 days before and +50 after) simulation
# x = days, y = daily inventory
print(td + geom_line(aes(x = date, y = daily_inv)) + ylim(0, max(disrupt$daily_inv)) + xlim(700, 900) +
geom_hline(aes(yintercept = DATA[DATA$DESTINATION == f.name[i], 13]), linetype = "dashed") +
geom_vline(aes(xintercept = 750), linetype = "dotted") +
geom_vline(aes(xintercept = (750+21), linetype = "dotted")) +
stat_smooth(mapping = aes(x = date, y = daily_inv),
data = whole.sim, geom = "line", col = "red") +
labs(list(title = paste("Disruption Daily Inventory -", f.name[i]),
x = "Simulation Days", y = "Daily Inventory (kgs.)" )))
# plot of the whole simulation
# x = days, y = forecast error
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
print(tw + geom_point(aes(x = date, y = forecast_err)) +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "red") +
labs(list(title = paste("Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Forecast Error (kgs.)" )))
# plot of the whole simulation
# x = days, y1 = forecast error, y2 = actual daily inventory
# (error > 0 = forecast underestimate, error < 0 forecast overestimate)
# also confirming that the error is small, and comparing large error outliers to the inventory
print(tw + geom_line(aes(x = date, y = forecast_err), col = "red") +
labs(list(title = paste("Daily Inventory & Forecast Error -", f.name[i]),
x = "Simulation Days", y = "Material (kgs.)" )) +
geom_line(aes(x = date, y = daily_inv), col = "black") +
stat_smooth(mapping = aes(x = date, y = daily_inv), geom = "line", col = "red") +
stat_smooth(mapping = aes(x = date, y = forecast_err), geom = "line", col = "black"))
# histogram confirming that errors are normally distributed
#   (but zero-inflated due to off days)
print(tw + geom_histogram(mapping = aes(x = forecast_err, y = ..density..)) +
geom_density(aes(x = forecast_err, y = ..density..), col = "red"))
# end PDF creation
dev.off()
}
#### write the table of values for days with zero inventory, starting point ####
write.csv(zeroes, "ZeroInventoryTable.csv", quote = FALSE)
